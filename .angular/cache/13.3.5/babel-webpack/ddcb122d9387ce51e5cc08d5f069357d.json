{"ast":null,"code":"import * as p5 from 'p5';\nimport * as moment from 'moment'; // aDD this 1 of 4\n\nimport { BarMeta } from './BarData';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let CountdownToGraduationComponent = /*#__PURE__*/(() => {\n  class CountdownToGraduationComponent {\n    constructor(router) {\n      this.router = router;\n    }\n\n    ngOnInit() {\n      this.createCanvas();\n    }\n\n    createCanvas() {\n      let counterDiv = window.document.getElementById(\"counter\");\n      this.p5 = new p5(this.sketch, counterDiv);\n\n      this.p5.windowResized = () => {\n        counterDiv.innerHTML = \"\";\n        this.p5 = new p5(this.sketch, counterDiv);\n      };\n    }\n\n    sketch(p) {\n      const WRAPPER_DIV_MARGIN = 20;\n      const NUMBER_OF_TIME_BARS = 5;\n      const ALICEBLUE_HEX = \"f7f3ee\";\n      const END_OF_BAR_OFFSET = 6; // about ish the width of 2-3 whitespaces @ 100% zoom\n\n      const TIME_BAR_ROUNDED_RECTANGLE_VALUES = [0, 10, 10, 0]; // top-left, top-right, bottom-right, bottom-left\n\n      let counterDiv = window.document.getElementById(\"counter\");\n\n      try {\n        var divWidth = counterDiv.clientWidth;\n      } catch (_a) {}\n\n      let canvasHeight = window.innerHeight / 2;\n      let maxBarWidth = divWidth * 1 - 2 * WRAPPER_DIV_MARGIN;\n      let rowHeight = canvasHeight / (NUMBER_OF_TIME_BARS * 2);\n      let BAR_CONTAINER_MARGIN = rowHeight * .2;\n\n      p.setup = () => {\n        p.createCanvas(divWidth, canvasHeight - 2 * BAR_CONTAINER_MARGIN);\n      };\n\n      setInterval(() => {\n        if (p != null) {\n          p.clear();\n        }\n\n        let grad = moment(\"20210508\");\n        let now = moment();\n        let ss = grad.diff(now, \"seconds\") % 60;\n        let mm = grad.diff(now, \"minutes\") % 60;\n        let hh = grad.diff(now, \"hours\") % 24;\n        let DD = grad.diff(now, \"days\") % 7;\n        let WW = grad.diff(now, \"weeks\");\n        let isOrPastGrad = ss <= 0 && mm <= 0 && hh <= 0 && DD <= 0 && WW <= 0;\n\n        if (isOrPastGrad) {// I'll do something special at some points\n        } else {\n          p.strokeWeight(0);\n          p.textFont(\"Balsamiq Sans\");\n          p.textSize(rowHeight - 20);\n          p.textAlign(p.RIGHT, p.CENTER);\n          let barNetaArr = [new BarMeta(WW, 52, maxBarWidth / 52, \"#0c9df3\", \"W\"), new BarMeta(DD, 7, maxBarWidth / 7, \"#ec1390\", \"D\"), new BarMeta(hh, 24, maxBarWidth / 24, \"#37c87f\", \"H\"), new BarMeta(mm, 60, maxBarWidth / 60, \"#e68519\", \"M\"), new BarMeta(ss, 60, maxBarWidth / 60, \"#9b15ea\", \"S\") // Seconds\n          ];\n          barNetaArr.forEach((bar, index, _) => {\n            let percentage = bar.timeValue / bar.unitDivisor;\n            let width = Math.floor(maxBarWidth * percentage);\n            const NUBS = bar.widthPerUnit * 0.75;\n            const TIME_BAR_MID_LINE = rowHeight * 0.5;\n            let yPosition = index * 2 * rowHeight + BAR_CONTAINER_MARGIN;\n            let timeText = bar.desc + \" \" + bar.unit;\n            let textWidth = p.textWidth(timeText);\n            let textUnitWidth = textWidth / timeText.length;\n            let textXPosition = Math.max(textUnitWidth * 4, width - END_OF_BAR_OFFSET) + WRAPPER_DIV_MARGIN; // the 'holsters' of the bars\n\n            p.fill(p.color(\"#1d1d33\"));\n            p.rect(0, yPosition - BAR_CONTAINER_MARGIN, WRAPPER_DIV_MARGIN + NUBS, rowHeight + BAR_CONTAINER_MARGIN * 2, ...TIME_BAR_ROUNDED_RECTANGLE_VALUES); // 'cut out' of the bar holsters\n\n            p.strokeWeight(0);\n            p.fill(p.color(\"#2c2c4e\"));\n            p.rect(WRAPPER_DIV_MARGIN, yPosition, NUBS, rowHeight); // The actual bar of the time\n\n            p.fill(p.color(bar.barColour));\n            p.rect(WRAPPER_DIV_MARGIN, yPosition, width, rowHeight, ...TIME_BAR_ROUNDED_RECTANGLE_VALUES); // Text of the numeric time\n\n            p.fill(p.color(ALICEBLUE_HEX));\n            p.text(bar.desc, textXPosition, yPosition + TIME_BAR_MID_LINE);\n          });\n        }\n      }, 1000);\n    }\n\n  }\n\n  CountdownToGraduationComponent.ɵfac = function CountdownToGraduationComponent_Factory(t) {\n    return new (t || CountdownToGraduationComponent)(i0.ɵɵdirectiveInject(i1.Router));\n  };\n\n  CountdownToGraduationComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CountdownToGraduationComponent,\n    selectors: [[\"app-countdown-to-graduation\"]],\n    decls: 4,\n    vars: 0,\n    consts: [[1, \"counter-wrapper\"], [2, \"text-align\", \"center\"], [\"id\", \"counter\"]],\n    template: function CountdownToGraduationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\", 1);\n        i0.ɵɵtext(2, \"Countdown To Graduation\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\".counter-wrapper[_ngcontent-%COMP%]{font-family:Balsamiq Sans,cursive}\"]\n  });\n  return CountdownToGraduationComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}